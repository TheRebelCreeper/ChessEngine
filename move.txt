Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 45.39     26.22    26.22                             _mcount_private
 25.12     40.73    14.51                             __fentry__
 12.38     47.88     7.15 678631297     0.00     0.00  createMove
  5.82     51.24     3.36                             compareMoves
  2.46     52.66     1.42 24289876     0.00     0.00  materialCount
  1.47     53.51     0.85 1606556930     0.00     0.00  getFirstBitSquare
  1.09     54.14     0.63 48379429     0.00     0.00  playMove
  0.93     54.68     0.54 22507036     0.00     0.00  generateMoves
  0.86     55.17     0.50 22302194     0.00     0.00  generatePawnMoves
  0.83     55.66     0.48       31     0.02     0.42  negaMax
  0.54     55.97     0.31 28982220     0.00     0.00  generateKnightMoves
  0.48     56.24     0.28 137071202     0.00     0.00  getBishopAttacks
  0.45     56.50     0.26      128     0.00     0.00  find_magic_number
  0.38     56.72     0.22 137120573     0.00     0.00  getRookAttacks
  0.35     56.92     0.20 24354528     0.00     0.00  generateQueenMoves
  0.31     57.10     0.18 54437541     0.00     0.00  random_u64
  0.18     57.20     0.11 27240140     0.00     0.00  generateKingMoves
  0.17     57.31     0.10 22493740     0.00     0.00  generateBishopMoves
  0.14     57.38     0.08 26178939     0.00     0.00  generateRookMoves
  0.13     57.46     0.07 52385623     0.00     0.00  isSquareAttacked
  0.12     57.53     0.07 42851069     0.00     0.00  adjustCastlingRights
  0.09     57.58     0.05   215296     0.00     0.00  occupancyFromIndex
  0.09     57.63     0.05                             ___chkstk_ms
  0.05     57.66     0.03 21948532     0.00     0.00  evaluation
  0.03     57.68     0.02 18361271     0.00     0.00  countBits
  0.03     57.70     0.02 18145847     0.00     0.00  random_u64_fewbits
  0.03     57.72     0.02                             memset
  0.02     57.73     0.01 28565213     0.00     0.00  getQueenAttacks
  0.02     57.74     0.01                             __popcountdi2
  0.02     57.75     0.01                             memcpy
  0.02     57.76     0.01                             rand
  0.01     57.77     0.01   204800     0.00     0.00  generateRookAttacks
  0.01     57.77     0.01                             getPieceAtSquare
  0.00     57.77     0.00    10496     0.00     0.00  generateBishopAttacks
  0.00     57.77     0.00      128     0.00     0.00  calculateBishopOccupancy
  0.00     57.77     0.00      128     0.00     0.00  calculatePawnAttacks
  0.00     57.77     0.00      128     0.00     0.00  calculateRookOccupancy
  0.00     57.77     0.00       64     0.00     0.00  calculateKingAttacks
  0.00     57.77     0.00       64     0.00     0.00  calculateKnightAttacks
  0.00     57.77     0.00       36     0.00     0.00  getPieceFromChar
  0.00     57.77     0.00       20     0.00     0.65  search
  0.00     57.77     0.00        2     0.00     0.65  parseGo
  0.00     57.77     0.00        1     0.00     0.00  getCastlingRights
  0.00     57.77     0.00        1     0.00     0.54  initAttacks
  0.00     57.77     0.00        1     0.00     0.00  initLeapers
  0.00     57.77     0.00        1     0.00     0.54  initSliders
  0.00     57.77     0.00        1     0.00     0.00  loadFEN
  0.00     57.77     0.00        1     0.00     0.00  parsePosition
  0.00     57.77     0.00        1     0.00     0.00  setOccupancies
  0.00     57.77     0.00        1     0.00     1.30  uciLoop

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.02% of 57.77 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     45.4   26.22    0.00                 _mcount_private [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     25.1   14.51    0.00                 __fentry__ [2]
-----------------------------------------------
                0.00    1.30       2/20          parseGo [15]
                0.00    1.30       2/20          GOMP_parallel [17]
                0.00   10.43      16/20          gomp_thread_start [5]
[3]     22.6    0.00   13.04      20         search [3]
                0.48   12.56      31/31          negaMax [4]
                0.00    0.00       2/22507036     generateMoves [6]
                0.00    0.00      31/48379429     playMove [19]
-----------------------------------------------
                             25367176             negaMax [4]
                0.48   12.56      31/31          search [3]
[4]     22.6    0.48   12.56      31+25367176 negaMax [4]
                0.54    9.31 22507034/22507036     generateMoves [6]
                0.03    1.68 21948532/21948532     evaluation [12]
                0.63    0.36 48379398/48379429     playMove [19]
                0.00    0.00    2154/52385623     isSquareAttacked [27]
                0.00    0.00    1896/1606556930     getFirstBitSquare [20]
                             25367176             negaMax [4]
-----------------------------------------------
                                                 <spontaneous>
[5]     18.1    0.00   10.43                 gomp_thread_start [5]
                0.00   10.43      16/20          search [3]
-----------------------------------------------
                0.00    0.00       2/22507036     search [3]
                0.54    9.31 22507034/22507036     negaMax [4]
[6]     17.1    0.54    9.31 22507036         generateMoves [6]
                0.50    3.64 22302194/22302194     generatePawnMoves [8]
                0.31    1.42 28982220/28982220     generateKnightMoves [11]
                0.10    1.24 22493740/22493740     generateBishopMoves [14]
                0.20    0.93 24354528/24354528     generateQueenMoves [18]
                0.08    0.46 26178939/26178939     generateRookMoves [21]
                0.11    0.34 27240140/27240140     generateKingMoves [25]
-----------------------------------------------
                0.29    0.00 27658680/678631297     generateKingMoves [25]
                0.33    0.00 31172098/678631297     generateRookMoves [21]
                0.76    0.00 72469169/678631297     generateQueenMoves [18]
                1.06    0.00 100508584/678631297     generateBishopMoves [14]
                1.33    0.00 126009556/678631297     generateKnightMoves [11]
                3.38    0.00 320813210/678631297     generatePawnMoves [8]
[7]     12.4    7.15    0.00 678631297         createMove [7]
-----------------------------------------------
                0.50    3.64 22302194/22302194     generateMoves [6]
[8]      7.2    0.50    3.64 22302194         generatePawnMoves [8]
                3.38    0.00 320813210/678631297     createMove [7]
                0.26    0.00 486991656/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                                                 <spontaneous>
[9]      5.8    3.36    0.00                 compareMoves [9]
-----------------------------------------------
                                                 <spontaneous>
[10]     3.2    0.00    1.84                 main [10]
                0.00    1.30       1/1           uciLoop [16]
                0.00    0.54       1/1           initAttacks [22]
-----------------------------------------------
                0.31    1.42 28982220/28982220     generateMoves [6]
[11]     3.0    0.31    1.42 28982220         generateKnightMoves [11]
                1.33    0.00 126009556/678631297     createMove [7]
                0.09    0.00 167321406/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.03    1.68 21948532/21948532     negaMax [4]
[12]     3.0    0.03    1.68 21948532         evaluation [12]
                1.42    0.26 24289876/24289876     materialCount [13]
-----------------------------------------------
                1.42    0.26 24289876/24289876     evaluation [12]
[13]     2.9    1.42    0.26 24289876         materialCount [13]
                0.26    0.00 497521979/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.10    1.24 22493740/22493740     generateMoves [6]
[14]     2.3    0.10    1.24 22493740         generateBishopMoves [14]
                1.06    0.00 100508584/678631297     createMove [7]
                0.11    0.00 54820672/137071202     getBishopAttacks [26]
                0.08    0.00 142778523/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.00    1.30       2/2           uciLoop [16]
[15]     2.3    0.00    1.30       2         parseGo [15]
                0.00    1.30       2/20          search [3]
-----------------------------------------------
                0.00    1.30       1/1           main [10]
[16]     2.3    0.00    1.30       1         uciLoop [16]
                0.00    1.30       2/2           parseGo [15]
                0.00    0.00       1/1           parsePosition [52]
-----------------------------------------------
                                                 <spontaneous>
[17]     2.3    0.00    1.30                 GOMP_parallel [17]
                0.00    1.30       2/20          search [3]
-----------------------------------------------
                0.20    0.93 24354528/24354528     generateMoves [6]
[18]     2.0    0.20    0.93 24354528         generateQueenMoves [18]
                0.76    0.00 72469169/678631297     createMove [7]
                0.01    0.10 28565213/28565213     getQueenAttacks [31]
                0.05    0.00 92916145/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.00    0.00      31/48379429     search [3]
                0.63    0.36 48379398/48379429     negaMax [4]
[19]     1.7    0.63    0.36 48379429         playMove [19]
                0.07    0.19 52215160/52385623     isSquareAttacked [27]
                0.07    0.00 42851069/42851069     adjustCastlingRights [32]
                0.03    0.00 50430875/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.00    0.00    1896/1606556930     negaMax [4]
                0.00    0.00 2287360/1606556930     occupancyFromIndex [33]
                0.03    0.00 50430875/1606556930     playMove [19]
                0.04    0.00 82451873/1606556930     generateRookMoves [21]
                0.04    0.00 83855217/1606556930     generateKingMoves [25]
                0.05    0.00 92916145/1606556930     generateQueenMoves [18]
                0.08    0.00 142778523/1606556930     generateBishopMoves [14]
                0.09    0.00 167321406/1606556930     generateKnightMoves [11]
                0.26    0.00 486991656/1606556930     generatePawnMoves [8]
                0.26    0.00 497521979/1606556930     materialCount [13]
[20]     1.5    0.85    0.00 1606556930         getFirstBitSquare [20]
-----------------------------------------------
                0.08    0.46 26178939/26178939     generateMoves [6]
[21]     0.9    0.08    0.46 26178939         generateRookMoves [21]
                0.33    0.00 31172098/678631297     createMove [7]
                0.09    0.00 55426552/137120573     getRookAttacks [28]
                0.04    0.00 82451873/1606556930     getFirstBitSquare [20]
-----------------------------------------------
                0.00    0.54       1/1           main [10]
[22]     0.9    0.00    0.54       1         initAttacks [22]
                0.00    0.54       1/1           initSliders [23]
                0.00    0.00       1/1           initLeapers [50]
-----------------------------------------------
                0.00    0.54       1/1           initAttacks [22]
[23]     0.9    0.00    0.54       1         initSliders [23]
                0.26    0.25     128/128         find_magic_number [24]
                0.03    0.00  107648/215296      occupancyFromIndex [33]
                0.00    0.00  102400/204800      generateRookAttacks [40]
                0.00    0.00    5248/10496       generateBishopAttacks [42]
                0.00    0.00      64/128         calculateBishopOccupancy [43]
                0.00    0.00      64/128         calculateRookOccupancy [45]
-----------------------------------------------
                0.26    0.25     128/128         initSliders [23]
[24]     0.9    0.26    0.25     128         find_magic_number [24]
                0.02    0.18 18145847/18145847     random_u64_fewbits [29]
                0.03    0.00  107648/215296      occupancyFromIndex [33]
                0.02    0.00 18145975/18361271     countBits [35]
                0.00    0.00  102400/204800      generateRookAttacks [40]
                0.00    0.00    5248/10496       generateBishopAttacks [42]
                0.00    0.00      64/128         calculateBishopOccupancy [43]
                0.00    0.00      64/128         calculateRookOccupancy [45]
-----------------------------------------------
                0.11    0.34 27240140/27240140     generateMoves [6]
[25]     0.8    0.11    0.34 27240140         generateKingMoves [25]
                0.29    0.00 27658680/678631297     createMove [7]
                0.04    0.00 83855217/1606556930     getFirstBitSquare [20]
                0.00    0.00  168309/52385623     isSquareAttacked [27]
-----------------------------------------------
                0.06    0.00 28839316/137071202     getQueenAttacks [31]
                0.11    0.00 53411214/137071202     isSquareAttacked [27]
                0.11    0.00 54820672/137071202     generateBishopMoves [14]
[26]     0.5    0.28    0.00 137071202         getBishopAttacks [26]
-----------------------------------------------
                0.00    0.00    2154/52385623     negaMax [4]
                0.00    0.00  168309/52385623     generateKingMoves [25]
                0.07    0.19 52215160/52385623     playMove [19]
[27]     0.5    0.07    0.19 52385623         isSquareAttacked [27]
                0.11    0.00 53411214/137071202     getBishopAttacks [26]
                0.08    0.00 52739223/137120573     getRookAttacks [28]
-----------------------------------------------
                0.05    0.00 28954798/137120573     getQueenAttacks [31]
                0.08    0.00 52739223/137120573     isSquareAttacked [27]
                0.09    0.00 55426552/137120573     generateRookMoves [21]
[28]     0.4    0.22    0.00 137120573         getRookAttacks [28]
-----------------------------------------------
                0.02    0.18 18145847/18145847     find_magic_number [24]
[29]     0.3    0.02    0.18 18145847         random_u64_fewbits [29]
                0.18    0.00 54437541/54437541     random_u64 [30]
-----------------------------------------------
                0.18    0.00 54437541/54437541     random_u64_fewbits [29]
[30]     0.3    0.18    0.00 54437541         random_u64 [30]
-----------------------------------------------
                0.01    0.10 28565213/28565213     generateQueenMoves [18]
[31]     0.2    0.01    0.10 28565213         getQueenAttacks [31]
                0.06    0.00 28839316/137071202     getBishopAttacks [26]
                0.05    0.00 28954798/137120573     getRookAttacks [28]
-----------------------------------------------
                0.07    0.00 42851069/42851069     playMove [19]
[32]     0.1    0.07    0.00 42851069         adjustCastlingRights [32]
-----------------------------------------------
                0.03    0.00  107648/215296      initSliders [23]
                0.03    0.00  107648/215296      find_magic_number [24]
[33]     0.1    0.05    0.00  215296         occupancyFromIndex [33]
                0.00    0.00 2287360/1606556930     getFirstBitSquare [20]
                0.00    0.00  215296/18361271     countBits [35]
-----------------------------------------------
                                                 <spontaneous>
[34]     0.1    0.05    0.00                 ___chkstk_ms [34]
-----------------------------------------------
                0.00    0.00  215296/18361271     occupancyFromIndex [33]
                0.02    0.00 18145975/18361271     find_magic_number [24]
[35]     0.0    0.02    0.00 18361271         countBits [35]
-----------------------------------------------
                                                 <spontaneous>
[36]     0.0    0.02    0.00                 memset [36]
-----------------------------------------------
                                                 <spontaneous>
[37]     0.0    0.01    0.00                 memcpy [37]
-----------------------------------------------
                                                 <spontaneous>
[38]     0.0    0.01    0.00                 rand [38]
-----------------------------------------------
                                                 <spontaneous>
[39]     0.0    0.01    0.00                 __popcountdi2 [39]
-----------------------------------------------
                0.00    0.00  102400/204800      initSliders [23]
                0.00    0.00  102400/204800      find_magic_number [24]
[40]     0.0    0.01    0.00  204800         generateRookAttacks [40]
-----------------------------------------------
                                                 <spontaneous>
[41]     0.0    0.01    0.00                 getPieceAtSquare [41]
-----------------------------------------------
                0.00    0.00    5248/10496       initSliders [23]
                0.00    0.00    5248/10496       find_magic_number [24]
[42]     0.0    0.00    0.00   10496         generateBishopAttacks [42]
-----------------------------------------------
                0.00    0.00      64/128         initSliders [23]
                0.00    0.00      64/128         find_magic_number [24]
[43]     0.0    0.00    0.00     128         calculateBishopOccupancy [43]
-----------------------------------------------
                0.00    0.00     128/128         initLeapers [50]
[44]     0.0    0.00    0.00     128         calculatePawnAttacks [44]
-----------------------------------------------
                0.00    0.00      64/128         initSliders [23]
                0.00    0.00      64/128         find_magic_number [24]
[45]     0.0    0.00    0.00     128         calculateRookOccupancy [45]
-----------------------------------------------
                0.00    0.00      64/64          initLeapers [50]
[46]     0.0    0.00    0.00      64         calculateKingAttacks [46]
-----------------------------------------------
                0.00    0.00      64/64          initLeapers [50]
[47]     0.0    0.00    0.00      64         calculateKnightAttacks [47]
-----------------------------------------------
                0.00    0.00      36/36          loadFEN [51]
[48]     0.0    0.00    0.00      36         getPieceFromChar [48]
-----------------------------------------------
                0.00    0.00       1/1           loadFEN [51]
[49]     0.0    0.00    0.00       1         getCastlingRights [49]
-----------------------------------------------
                0.00    0.00       1/1           initAttacks [22]
[50]     0.0    0.00    0.00       1         initLeapers [50]
                0.00    0.00     128/128         calculatePawnAttacks [44]
                0.00    0.00      64/64          calculateKnightAttacks [47]
                0.00    0.00      64/64          calculateKingAttacks [46]
-----------------------------------------------
                0.00    0.00       1/1           parsePosition [52]
[51]     0.0    0.00    0.00       1         loadFEN [51]
                0.00    0.00      36/36          getPieceFromChar [48]
                0.00    0.00       1/1           getCastlingRights [49]
                0.00    0.00       1/1           setOccupancies [53]
-----------------------------------------------
                0.00    0.00       1/1           uciLoop [16]
[52]     0.0    0.00    0.00       1         parsePosition [52]
                0.00    0.00       1/1           loadFEN [51]
-----------------------------------------------
                0.00    0.00       1/1           loadFEN [51]
[53]     0.0    0.00    0.00       1         setOccupancies [53]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [34] ___chkstk_ms           [25] generateKingMoves      [27] isSquareAttacked
   [2] __fentry__             [11] generateKnightMoves    [51] loadFEN
  [39] __popcountdi2           [6] generateMoves          [13] materialCount
   [1] _mcount_private         [8] generatePawnMoves      [37] memcpy
  [32] adjustCastlingRights   [18] generateQueenMoves     [36] memset
  [43] calculateBishopOccupancy [40] generateRookAttacks   [4] negaMax
  [46] calculateKingAttacks   [21] generateRookMoves      [33] occupancyFromIndex
  [47] calculateKnightAttacks [26] getBishopAttacks       [15] parseGo
  [44] calculatePawnAttacks   [49] getCastlingRights      [52] parsePosition
  [45] calculateRookOccupancy [20] getFirstBitSquare      [19] playMove
   [9] compareMoves           [41] getPieceAtSquare       [38] rand
  [35] countBits              [48] getPieceFromChar       [30] random_u64
   [7] createMove             [31] getQueenAttacks        [29] random_u64_fewbits
  [12] evaluation             [28] getRookAttacks          [3] search
  [24] find_magic_number      [22] initAttacks            [53] setOccupancies
  [42] generateBishopAttacks  [50] initLeapers            [16] uciLoop
  [14] generateBishopMoves    [23] initSliders
